{"version":3,"sources":["game/context/GameContext.tsx","game/Header.tsx","game/Footer.tsx","game/pins/SmallPin.tsx","game/pins/HugePin.tsx","game/pins/HugeColorSelectorPin.tsx","game/Guess.tsx","game/Line.tsx","game/Solution.tsx","game/PlayArea.tsx","utils/game.ts","utils/api.ts","game/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultSettings","pins","colours","lines","emptyGuess","Array","from","length","defaultGameContext","id","settings","actualGuess","map","e","actualLine","changeGuess","guess","nextLine","setId","GameContext","React","createContext","reloadPage","window","location","reload","Header","memo","props","playerWon","lessLine","error","isLoaded","className","message","onClick","pp","np","Footer","href","SmallPin","pinId","HugePin","marked","HugeColorSelectorPin","useState","state","setState","Consumer","open","changeSelector","pinIndex","preventDefault","_","selectablePin","key","selectPin","Guess","openedSelectorNr","actual","pin","index","prevState","Line","submitInProgress","submitGuess","results","emptyPins","every","sameValues","Solution","isOver","solution","PlayArea","line","result","generateSequence","gameSettings","Math","floor","random","games","secret","guesses","NEED_SERVER","process","REACT_APP_LOCAL_GAME","Game","context","useContext","useReducer","action","emptyLine","generateLines","useEffect","fetch","then","res","json","Promise","resolve","type","console","setLineFromResponse","data","evaluation","i","goodGuess","push","goodColour","some","el","guessBody","method","headers","body","JSON","stringify","gue","isFinite","isNaN","Error","gameInstance","reduce","acc","curr","value","secretP","guessP","filter","p","secretHistogram","guesslist","gcRemainingGuesses","gcSecretHistogram","evaluateGuess","noMoreLines","response","undefined","App","Provider","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4fcba0d.chunk.js","sourcesContent":["import React from 'react';\nimport { GameContextType, GuessType } from '../types';\n\nexport const defaultSettings = {\n    pins: 4,\n    colours: 6,\n    lines: 10,\n}\n\nexport const NEUTRALHUGEPIN = -1;\nexport const NEUTRALSMALLPIN = 0;\nexport const GOODGUESSPINID = 1;\nexport const GOODCOLOURPINID = 2;\n\nexport const emptyGuess = Array.from({length: defaultSettings.pins}, () => NEUTRALHUGEPIN)\n\nexport const defaultGameContext: GameContextType = {\n    id: \"\",\n    settings: defaultSettings,\n    actualGuess: emptyGuess.map(e=>e),\n    actualLine: 0,\n    changeGuess: (guess: GuessType) => {\n        defaultGameContext.actualGuess = guess\n    },\n    nextLine: () => {\n        defaultGameContext.actualLine++\n        defaultGameContext.actualGuess = emptyGuess.map(e=>e)\n    },\n    setId: (id: string) => {\n        defaultGameContext.id = id;\n    }\n}\n\nexport const GameContext = React.createContext(defaultGameContext);","import React from 'react';\nimport \"./header.scss\";\n\ntype HeaderProps = {\n    lessLine: boolean,\n    playerWon: boolean,\n    isLoaded: boolean;\n    error: { message: string } | null;\n};\n\nfunction reloadPage() {\n    window.location.reload();\n}\n\nconst Header: React.FC<HeaderProps> = React.memo((props) => {\n    const { playerWon, lessLine, error, isLoaded } = props\n    return (\n        <div className=\"header\">\n            {(error) && (`${error.message}`)}\n            {!isLoaded && (`Loading...`)}\n            {(playerWon) && (\n                <div className=\"button\" onClick={() => reloadPage()} >\n                    Congratulations! <br />You won!<br />Do you want to play again?\n                </div>\n            )}\n            {(!playerWon && !lessLine) && (\n                <div className=\"button\" onClick={() => reloadPage()}>\n                    You lost :( <br />Do you want to try again?\n                </div>\n            )}\n        </div>\n    )\n}, (pp, np) => {\n    return (pp.playerWon === np.playerWon\n        && pp.lessLine === np.lessLine\n        && pp.isLoaded === np.isLoaded\n        && pp.error === np.error\n    )\n})\nexport { Header };","import React from 'react';\nimport \"./footer.scss\";\n\nconst Footer: React.FC = React.memo(() => {\n    return (\n        <footer>\n            <p>Free logic game based on <a href=\"https://en.wikipedia.org/wiki/Mastermind_(board_game)\">Mastermind</a>.</p>\n            <p>Implemented by <a href=\"http://budavariam.github.io\">Mátyás Budavári</a></p>\n        </footer>\n    )\n}, () => true)\n\nexport { Footer };","import React from 'react';\nimport \"./pins.scss\"\n\ntype SmallPinProps = {\n  pinId: number,\n};\n\nconst SmallPin: React.FC<SmallPinProps> = React.memo((props) => {\n  return (\n    <div className={`pin smallpin smallpin-${props.pinId}`}></div>\n  );\n}, (pp, np) => pp.pinId === np.pinId)\n\nexport { SmallPin }","import React from 'react';\nimport \"./pins.scss\"\n\ntype HugePinProps = {\n  pinId: number,\n  marked?: boolean,\n  onClick?: () => void,\n};\n\nconst HugePin: React.FC<HugePinProps> = React.memo((props) => {\n  return (\n    <div className={`pin hugepin hugepin-${props.pinId} ${props.marked ? \"marked\" : \"\"}`} onClick={props.onClick}></div>\n  );\n}, (pp, np) => pp.pinId === np.pinId)\n\nexport { HugePin }","import React, { useState } from 'react';\nimport { HugePin } from './HugePin';\nimport { GameContext } from '../context/GameContext';\nimport \"./colorselector.scss\";\nimport { GuessType } from '../types';\n\ntype HCSPState = {\n    pinId: number,\n};\n\ntype HCSPProps = {\n    pinId: number,\n    pinIndex: number,\n    open: boolean,\n    changeSelector: (i: number) => void,\n}\nconst HugeColorSelectorPin: React.FC<HCSPProps> = (props: HCSPProps) => {\n    const [state, setState] = useState<HCSPState>({\n        pinId: props.pinId\n    })\n\n    const selectPin = (selectablePin: number, actualGuess: GuessType, changeGuess: (g: GuessType) => void) => {\n        setState({ pinId: selectablePin })\n        actualGuess[props.pinIndex] = selectablePin\n        changeGuess(actualGuess)\n    }\n\n    return (\n        <GameContext.Consumer>\n            {({ actualGuess, changeGuess, settings }) => (\n                <details\n                    open={props.open}\n                    onClick={(e: React.MouseEvent) => {\n                        props.changeSelector(props.pinIndex)\n                        e.preventDefault()\n                    }}>\n                    <summary>\n                        <HugePin pinId={state.pinId}></HugePin>\n                    </summary>\n                    <div className=\"pinselector\">\n                        {Array.from({ length: settings.colours }).map((_, selectablePin) => (\n                            <HugePin\n                                key={`${props.pinId}-${selectablePin}`}\n                                pinId={selectablePin}\n                                marked={selectablePin === state.pinId}\n                                onClick={() => selectPin(selectablePin, actualGuess, changeGuess)}>\n                            </HugePin>))\n                        }\n                    </div>\n                </details>)\n            }\n        </GameContext.Consumer>\n    )\n}\n\nexport { HugeColorSelectorPin };","import React, { useState } from 'react';\nimport './guess.scss';\nimport { HugeColorSelectorPin } from './pins/HugeColorSelectorPin';\nimport { HugePin } from './pins/HugePin';\nimport { GuessType } from './types';\n\ntype GuessProps = {\n    actual: boolean,\n    pins: GuessType,\n};\n\ntype GuessState = {\n    openedSelectorNr: number\n}\n\nconst Guess: React.FC<GuessProps> = (props: GuessProps) => {\n    const [state, setState] = useState<GuessState>({\n        openedSelectorNr: -1\n    })\n    return (<div className=\"guess\">\n        {props.actual\n            ? (props.pins.map((pin, index) => (\n                <HugeColorSelectorPin\n                    pinId={pin}\n                    key={`actual-${index}`}\n                    pinIndex={index}\n                    open={state.openedSelectorNr === index}\n                    changeSelector={(index: number) => { setState((prevState) => ({ openedSelectorNr: (index !== prevState.openedSelectorNr) ? index : -1 })) }}\n                >\n                </HugeColorSelectorPin>)))\n            : (props.pins.map((pin, index) => (<HugePin pinId={pin} key={`${index}-${pin}`} />)))\n        }\n    </div>)\n};\n\nexport { Guess }\n","import React from 'react';\nimport { SmallPin } from './pins/SmallPin';\nimport \"./line.scss\";\nimport { Guess } from './Guess';\nimport { GuessType } from './types';\nimport { NEUTRALHUGEPIN, NEUTRALSMALLPIN } from './context/GameContext';\n\ntype LineProps = {\n  pins: GuessType,\n  results: GuessType,\n  actual: boolean,\n  submitInProgress: boolean,\n  submitGuess: () => void,\n};\n\nconst Line: React.FC<LineProps> = React.memo((props: LineProps) => {\n  return (\n    <div className={`line ${props.actual ? \"actual\" : \"\"}`} >\n      <Guess actual={props.actual} pins={props.pins} />\n      <div className=\"results\">\n        {props.actual\n          ? (<div className=\"submit\">\n            {props.submitInProgress\n              ? <div className=\"spinner\"></div>\n              : <div className=\"button\" onClick={() => props.submitGuess()}>OK</div>}\n          </div>)\n          : (<div className=\"sent\">{props.results.map((pin, index) => (\n            <SmallPin pinId={pin} key={`${index}-${pin}`} />)\n          )}</div>)\n        }\n      </div>\n    </div >\n  );\n}, (pp, np) => {\n  const emptyPins = np.results.every(e => e === NEUTRALSMALLPIN) && np.pins.every(e => e === NEUTRALHUGEPIN)\n  const sameValues = (pp.results === np.results) && (pp.pins === np.pins)\n  return np.actual\n    ? sameValues && pp.submitInProgress === np.submitInProgress // there is no need to rerender current line if the loading state or values haven't changed.\n    : sameValues || emptyPins // We don't need to rerender previous guesses, or later empty lines\n});\n\nexport { Line }","import React from 'react';\nimport \"./line.scss\";\nimport \"./solution.scss\";\nimport { Guess } from './Guess';\nimport { emptyGuess } from './context/GameContext';\nimport { SolutionType } from './types';\n\ntype SolutionProps = {\n  isOver: boolean,\n  solution: SolutionType,\n};\n\nconst Solution: React.FC<SolutionProps> = React.memo((props: SolutionProps) => {\n  return (<div className=\"line\">\n    <div className={`solution ${!props.isOver ? \"hidden-solution\" : \"\"}`}>\n      <Guess pins={props.solution ? props.solution : emptyGuess.map(e => e)} actual={false} />\n    </div>\n    <div className=\"results\"></div>\n  </div>)\n}, (pp, np) => pp.isOver === np.isOver)\n\nexport { Solution }","import React from 'react';\nimport \"./playarea.scss\";\nimport { LineType, SolutionType } from './types';\nimport { Line } from './Line';\nimport { Solution } from './Solution';\n\ntype PlayAreaProps = {\n  submitInProgress: boolean,\n  submitGuess: () => void,\n  lines: LineType[],\n  isOver: boolean,\n  actualLine: number,\n  solution: SolutionType,\n};\n\n\nconst PlayArea: React.FC<PlayAreaProps> = (props: PlayAreaProps) => {\n  const lines = props.lines.map((line: LineType, index: number) =>\n    (<Line\n      key={index}\n      pins={line.guess}\n      results={line.result}\n      actual={(!props.isOver) && (index === props.actualLine)}\n      submitInProgress={props.submitInProgress}\n      submitGuess={props.submitGuess}\n    />)\n  )\n  return (<div className=\"playarea\">\n    <Solution isOver={props.isOver} solution={props.solution} />\n    {lines}\n  </div>)\n\n}\n\nexport { PlayArea }","import { GameSettings } from \"../game/types\"\n\ninterface Accumulator {\n    secretHistogram: { [key: string]: number };\n    guesslist: number[];\n}\n\nexport function evaluateGuess(gameSettings: GameSettings, secret: number[], guess: number[]): { goodGuess: number, goodColour: number, playerWon: boolean } {\n    const goodGuess = secret.reduce(\n        (acc, curr, index) => acc + ((curr === guess[index]) ? 1 : 0), 0\n    )\n    const { guesslist: gcRemainingGuesses, secretHistogram: gcSecretHistogram } = guess\n        .map((value, index) => ({ secretP: secret[index], guessP: value }))\n        .filter(p => p.guessP !== p.secretP)\n        .reduce<Accumulator>((acc, curr) => {\n            acc.secretHistogram[curr.secretP] = acc.secretHistogram[curr.secretP] ? (acc.secretHistogram[curr.secretP] + 1) : 1\n            acc.guesslist.push(curr.guessP)\n            return acc\n        }, { secretHistogram: {}, guesslist: [] })\n    const goodColour = gcRemainingGuesses.reduce((acc, curr) => {\n        if (gcSecretHistogram[curr]) {\n            acc++\n            gcSecretHistogram[curr]--\n        }\n        return acc\n    }, 0)\n    const playerWon = (goodGuess === gameSettings.pins)\n    return {\n        goodGuess,\n        goodColour,\n        playerWon,\n    }\n}\n\nexport function generateSequence(gameSettings: GameSettings) {\n    return Array.from({ length: gameSettings.pins }, () => Math.floor(Math.random() * gameSettings.colours));\n}","import { generateSequence, evaluateGuess } from \"./game\"\nimport { GameSettings } from \"../game/types\"\n\ntype GameGuess = {\n    guess: number[],\n    evaluation: { goodGuess: number, goodColour: number, playerWon: boolean }\n}\n\ntype GameState = {\n    \"local\": {\n        guesses: GameGuess[],\n        secret: number[],\n        isOver: boolean,\n    }\n}\n\nconst games: GameState = {\n    \"local\": {\n        secret: [-1, -1, -1, -1],\n        guesses: [],\n        isOver: false,\n    }\n}\n\nconst gameSettings: GameSettings = {\n    colours: 6,\n    pins: 4,\n    lines: 10,\n}\n\nfunction start() {\n    const id = \"local\"\n    games[id] = {\n        secret: generateSequence(gameSettings),\n        guesses: [],\n        isOver: false\n    }\n    // console.log(id, games[id].secret)\n    return Promise.resolve({\n        id,\n        settings: gameSettings\n    })\n}\n\n\n\nfunction guess(guess: number[]) {\n    const id = \"local\"\n    if (!guess.length || guess.some((gue) => !isFinite(gue) || isNaN(gue) || gue > gameSettings.colours || gue < 0)) {\n        throw new Error(\"Invalid parameters\")\n    }\n\n    const gameInstance = games[id]\n    if (!gameInstance) {\n        throw new Error(\"Game has not started\")\n    }\n\n    const secret = gameInstance.secret\n    if (gameInstance.isOver) {\n        throw new Error(\"Game has already finished\")\n    }\n\n    const { goodGuess, goodColour, playerWon } = evaluateGuess(gameSettings, secret, guess)\n\n    gameInstance.guesses.push({ guess, evaluation: { goodGuess, goodColour, playerWon } })\n    const noMoreLines = gameInstance.guesses.length >= gameSettings.lines\n    gameInstance.isOver = playerWon || noMoreLines\n\n    //console.log(id, games[id].secret, guess, goodGuess, goodColour, playerWon)\n\n    const response = {\n        goodGuess, goodColour, playerWon,\n        solution: gameInstance.isOver ? secret : undefined\n    }\n    return Promise.resolve(response)\n}\n\nexport {\n    start, guess\n}","import React, { useEffect, useContext, useReducer } from 'react';\nimport { GameResponse, GameSettings, LineType, ErrorType, SolutionType } from './types';\nimport { GameContext, defaultSettings, emptyGuess, GOODGUESSPINID, GOODCOLOURPINID, NEUTRALSMALLPIN } from './context/GameContext';\nimport \"./game.scss\";\nimport { Header } from './Header';\nimport { Footer } from './Footer';\nimport { PlayArea } from './PlayArea';\nimport { guess, start } from '../utils/api';\n\ntype GameState = {\n    error: ErrorType,\n    isLoaded: boolean,\n    lines: LineType[],\n    playerWon: boolean,\n    solution: SolutionType,\n    submitInProgress: boolean,\n};\n\ntype GameStateAction = (\n    { type: \"LOADED\", isLoaded: boolean, error?: ErrorType }\n    | { type: \"ERROR\", }\n    | { type: \"SUBMITING\", submitInProgress: boolean }\n    | { type: \"NEXT_STEP\", playerWon: boolean, lines: LineType[], solution: SolutionType, error?: ErrorType });\n\nconst NEED_SERVER = !process.env.REACT_APP_LOCAL_GAME || false\n\nconst Game: React.FC<{}> = () => {\n    const context = useContext(GameContext)\n\n    const generateLines = (settings: GameSettings): LineType[] => {\n        const emptyLine = {\n            guess: emptyGuess.map(e => e),\n            result: Array.from({ length: settings.pins }, () => NEUTRALSMALLPIN),\n        }\n        return Array.from({ length: settings.lines }, () => emptyLine)\n    }\n\n    const [state, setState] = useReducer((prevState: GameState, action: GameStateAction): GameState => {\n        return {\n            ...prevState,\n            ...action\n        }\n    }, {\n        error: null,\n        isLoaded: false,\n        submitInProgress: false,\n        lines: generateLines(defaultSettings),\n        playerWon: false,\n        solution: null,\n    })\n\n\n    useEffect(() => {\n        const startFn = (NEED_SERVER) ? fetch(\"/api/start\").then(res => res.json()) : start()\n        \n        startFn\n            .then(\n                (result) => {\n                    context.setId(result.id)\n                    setState({\n                        type: \"LOADED\",\n                        isLoaded: true,\n                    });\n                },\n                (error) => {\n                    console.error(error)\n                    setState({\n                        type: \"LOADED\",\n                        isLoaded: true,\n                        error: { message: \"There was an error during server request, sorry for the inconvenience :(\" },\n                    });\n                }\n            )\n        // The empty bracket is intentional in useEffect dependency list. It is there to ensure that this hook runs only once\n        // eslint-disable-next-line\n    }, [])\n\n    const setLineFromResponse = (lines: LineType[], data: GameResponse): LineType[] => {\n        const evaluation = []\n        for (let i = 0; i < data.goodGuess; i++) {\n            evaluation.push(GOODGUESSPINID)\n        }\n        for (let i = 0; i < data.goodColour; i++) {\n            evaluation.push(GOODCOLOURPINID)\n        }\n        while (evaluation.length < context.settings.pins) {\n            evaluation.push(NEUTRALSMALLPIN)\n        }\n        lines[context.actualLine] = {\n            guess: context.actualGuess.map((e: number) => e),\n            result: evaluation,\n        }\n        context.nextLine()\n        return lines\n    }\n\n    const submitGuess = () => {\n        if (context.actualGuess.some((el: number) => el < 0 || el > context.settings.colours)) {\n            setState({\n                type: \"LOADED\",\n                isLoaded: true,\n                error: { message: \"Please fill each slot!\" },\n            });\n        } else {\n            setState({\n                type: \"SUBMITING\",\n                submitInProgress: true,\n            })\n            const guessBody = { id: context.id, guess: context.actualGuess }\n            const guessFn = (NEED_SERVER) ? fetch('/api/guess', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(guessBody)\n            }).then(res => res.json()) : guess(guessBody.guess)\n            guessFn.then(\n                    (result: GameResponse) => {\n                        if (result.message) {\n                            setState({\n                                type: \"LOADED\",\n                                isLoaded: true,\n                                error: { message: result.message }\n                            });\n                        } else {\n                            setState({\n                                type: \"NEXT_STEP\",\n                                playerWon: result.playerWon,\n                                lines: setLineFromResponse(state.lines, result),\n                                solution: result.solution ? result.solution : null,\n                                error: null\n                            });\n                        }\n                    },\n                    (error: Error) => {\n                        console.error(error)\n                        setState({\n                            type: \"LOADED\",\n                            isLoaded: true,\n                            error: { message: \"There was an error during server request, sorry for the inconvenience :(\" },\n                        });\n                    }\n                )\n                .then(() => setState({ type: \"SUBMITING\", submitInProgress: false }))\n        }\n    }\n\n    const { error, isLoaded, submitInProgress } = state;\n    const lessLine = context.actualLine < context.settings.lines\n    return (\n        <div className=\"game\">\n            <Header\n                lessLine={lessLine}\n                playerWon={state.playerWon}\n                error={error}\n                isLoaded={isLoaded}\n            />\n            {(isLoaded) && (\n                <PlayArea\n                    submitInProgress={submitInProgress}\n                    submitGuess={submitGuess}\n                    lines={state.lines}\n                    isOver={state.playerWon || (!state.playerWon && !lessLine)}\n                    solution={state.solution}\n                    actualLine={context.actualLine}\n                />\n            )}\n            <Footer />\n        </div>\n    )\n}\n\nexport { Game };","import React from 'react';\nimport './App.scss';\nimport { Game } from './game/Game';\nimport { GameContext, defaultGameContext } from './game/context/GameContext';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <GameContext.Provider value={defaultGameContext}>\n        <Game />\n      </GameContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}